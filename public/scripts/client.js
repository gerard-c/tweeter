$(() => { // page must load before anything else happens
  
  // used to prevent Justin Long from injecting scripts via tweet textarea
  const escape = (str) => {
    let div = document.createElement("div");
    div.appendChild(document.createTextNode(str));
    return div.innerHTML;
  };
  
  // generates HTML article using data from a tweet object
  const createTweetElement = (tweet) => {
    return `
    <article class="tweet">
      <header>
        <div>
          <img src=${tweet.user.avatars}>
          <p>${tweet.user.name}</p>
        </div>
        <p class="handle">${tweet.user.handle}</p>
      </header>
      <p class="tweet-body">${escape(tweet.content.text)}</p>
      <footer>
        <p>${timeago.format(tweet.created_at)}</p>
        <div>
          <i class="fa-solid fa-flag"></i> <i class="fa-solid fa-retweet"></i> <i class="fa-solid fa-heart"></i>
        </div>
      </footer>
    </article>`;
  };
  
  // adds tweet/tweets to page
  const renderTweets = (tweetArray) => {

    for (const tweet of tweetArray) {
      $('.tweets').prepend(createTweetElement(tweet));
    }
  };
  
  // provides renderTweets with tweet data
  const loadTweets = (allOrLast) => {

    if (allOrLast === 'all') {
      $.ajax('/tweets', { method: 'GET' })
      .then(function(tweets) {
        
        console.log('Success: ', tweets);
        renderTweets(tweets);
      });
    }

    if (allOrLast === 'last') {
      $.ajax('/tweets', { method: 'GET' })
      .then(function(tweets) {
        
        console.log('Success: ', tweets[tweets.length - 1]);
        renderTweets([tweets[tweets.length - 1]]);
      });
    }
  };

  // populates page on load (placeholder?)
  loadTweets('all');

  // hides/shows "new tweet" area
  $('#toggle-form').on('click', function() {
    if ($('.new-tweet').is(':visible')) {
      $('.new-tweet').slideUp(250, () => {});
    } else {
      $('.new-tweet').slideDown(250, () => {});
    }
  });

  $('form').submit(function(event) {
    event.preventDefault(); // prevent page reload
    
    $('.error-text').slideUp(250, () => {}); // hides error text
    
    let newTweetText = $(this).children('#tweet-text').val(); // data from textarea
    
    // hidden error HTML element is written, shown on either error
    if (!newTweetText) {
      $('.error-text').html(' ðŸ›‘ Error: You have to enter a tweet to post a tweet! ðŸ›‘ ');
      $('.error-text').slideDown(250, () => {
        console.log('Error: empty textarea');
      });
      
      return;
      
    } else if (newTweetText.length > 140) {
      $('.error-text').html(' ðŸ›‘ Error: Tweet must be 140 characters or less! ðŸ›‘ ');
      $('.error-text').slideDown(250, () => {
        console.log('Error: over character limit');
      });
      
      return;
    }
    
    newTweetText = $(this).serialize(); // reformat for POST request
    
    // if no errors, textarea data is sent to database with other tweets, the "new tweet" area is reset
    // and the tweet viewing area is updated with a new tweet object generated by helpers
    $.post('/tweets', newTweetText)
      .done(function() {
        console.log('Success: ', newTweetText);
        $('#tweet-text').val('');
        $('.counter').html(140);
        loadTweets('last');
      });
  });
});